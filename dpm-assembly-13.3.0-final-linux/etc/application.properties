# == Active profiles ==
 
# Available profiles (separate by commas, some are mutually exclusive):
#
# KEYCLOAK_DEV: temporary solution to enable authentication out of the box
# KEYCLOAK_LOCAL: alternative to KEYCLOAK_DEV setting the Keycloak to use local instance running at standard port
#
spring.profiles.active=KEYCLOAK_DEV

# == Authentication ==

# Keycloak settings (use as alternative to setting by the profiles)
#
# Base URL is just a helper property, which can be used to construct others.
#ataccama.authentication.keycloak.base-url=http://localhost:8029
#ataccama.authentication.keycloak.server-url=${ataccama.authentication.keycloak.base-url}/auth
#ataccama.authentication.keycloak.realm=ataccamaone
#ataccama.authentication.keycloak.token.client-id=dpm-token-client
#ataccama.authentication.keycloak.token.secret=dpm-token-client-s3cret
#ataccama.authentication.keycloak.token.issuer=${ataccama.authentication.keycloak.server-url}/realms/${ataccama.authentication.keycloak.realm}


## == Overrides ==

# ONE Configuration Service client set-up (set to 'mandatory' to use configuration service)
#ataccama.config-service.runtime=off
#ataccama.client.connection.configservice.host=localhost
#ataccama.client.connection.configservice.grpc.port=8511
#ataccama.authentication.internal.jwt.generator.key=<generated key>

# Basic gRPC server authorization settings
#ataccama.authentication.grpc.basic.enable=true
#ataccama.authentication.grpc.bearer.enable=true
#ataccama.authentication.grpc.internal.jwt.enable=true
#ataccama.authentication.grpc.mtls.enable=false

# Logging setup
#logging.level.root=INFO
logging.level.com.ataccama=INFO
#logging.level.com.ataccama.lib=INFO
#logging.level.net.javacrumbs.shedlock=INFO

#this could be set via LOG_PATH
#logging.file.path=${ataccama.path.log}

ataccama.logging.plainTextConsoleAppender = true
ataccama.logging.jsonConsoleAppender = false
ataccama.logging.plainTextFileAppender = false
ataccama.logging.jsonFileAppender = true

#plugins.path=${ataccama.path.plugin}

# The number of threads that will be used to check status of engines
#ataccama.one.dpm.registry.check-engine-threads=4
# How often should a connected engine be checked
#ataccama.one.dpm.registry.check-connected-interval=1s
# The initial interval for checking a disconnected engine. The first check is done immediately, then this interval is applied if still disconnected.
#ataccama.one.dpm.registry.check-disconnected-interval=1s
# A multiplier that enlarges checking interval for a disconnected engine with each unsuccessful try.
#ataccama.one.dpm.registry.check-disconnected-interval-multiplier=2
# The maximum interval for checking a disconnected engine. The multiplier can't enlarge the interval beyond this maximum.
#ataccama.one.dpm.registry.check-disconnected-interval-max=10m
# A timeout for a GRPC request when checking an engine. In milliseconds.
#ataccama.one.dpm.registry.grpc-checker-timeout=200

# A time after which a channel provider returned by an engine registry is safe to dispose
#ataccama.one.dpm.registry.channel-provider-ttl=1h

# A scheduler period for automatic inactivating of engines. In milliseconds.
#ataccama.one.dpm.registry.inactivate-scheduler-period=600000
# A time threshold for an automatic inactivation.
#ataccama.one.dpm.registry.automatically-inactivate-engines-not-seen-for=2d
# A time threshold for a manual inactivation. Should be larger than plugin.executor.ataccama.one.job-disconnected-timeout.
#ataccama.one.dpm.registry.manually-inactivate-engines-not-seen-for=65m

# Endpoints for monitoring
#management.endpoint.health.show-details=always
#management.endpoint.health.show-components=always
#management.endpoints.enabled-by-default=false
#management.endpoint.info.enabled=true
#management.endpoint.health.enabled=true
#management.endpoint.prometheus.enabled=true
#management.endpoints.web.exposure.include=health,info,prometheus
# Timing metrics to all spring endpoints (true by default)
#management.metrics.web.server.auto-time-requests=false

# If you want to restrict access to /actuator/health and /actuator/info (which are among public ones by default), please uncomment and add them to the following line.
#ataccama.authentication.http.public-endpoint-restriction-filter=/actuator/prometheus

# Access control for endpoints
#ataccama.authentication.http.acl.endpoints.prometheus.endpoint-filter=/actuator/prometheus
#ataccama.authentication.http.acl.endpoints.prometheus.allowed-roles=ONE_PLATFORM_MONITORING

# Probes
#management.endpoint.health.probes.enabled=true
#management.endpoint.health.group.readiness.include=db,context
#management.endpoint.health.group.liveness.include=diskSpace,ping

# HTTPS settings
#server.ssl.key-store-type=PKCS12|JKS
#server.ssl.key-store=file:/path/to/keystore.[p12|jks]
#server.ssl.key-store-password=<keystore password>
#server.ssl.key-alias=<key alias>
#security.require-ssl=true

# HTTPS clients
#ataccama.client.http.tls.enabled=true
#ataccama.client.http.tls.trustStore=path to trust store #e.g. file:/path/to/truststore.p12
#ataccama.client.http.tls.trustStorePassword=<password>

# gRPC server config
# port that will be used by gRPC service
#ataccama.server.grpc.port=8531
# maximum message size the server is accepting to process
#ataccama.server.grpc.maxMessageSize=1GB

# gRPC server TLS/mTLS config
#ataccama.server.grpc.tls.on=false
#ataccama.server.grpc.tls.cert-chain=path to certificate (public key) #e.g file:/path/to/server.crt
#ataccama.server.grpc.tls.private-key=path to private key e.g. file:/path/to/server.key
#ataccama.server.grpc.tls.trust-cert-collection=path to public certificate of trusted authority e.g. file:/path/to/rootCA.crt
#ataccama.server.grpc.tls.m-tls=none|optional|require

# Global gRPC client config
#ataccama.client.grpc.properties.maxMessageSize=1GB

# Global gRPC client TLS/mTLS config
#ataccama.client.grpc.tls.on=false
#ataccama.client.grpc.tls.mtls=false
#ataccama.client.grpc.tls.cert-chain=file:path/to/cert/chain.crt
#ataccama.client.grpc.tls.private-key=file:path/to/private.key
#ataccama.client.grpc.tls.trust-cert-collection=file:path/to/trust/cert/chain.crt

# Maximum number of threads in a pool dedicated to pre-processing and submitting of jobs to the main queue (defaults to 5).
#plugin.executor.ataccama.one.job-processing.max-pool-size=5
# Size of the thread pool dedicated to pre-processing and submitting of jobs to the main queue (defaults to 5).
#plugin.executor.ataccama.one.job-processing.core-pool-size=5
# Capacity of the executor queue dedicated to pre-processing and submitting of jobs to the main queue (defaults to practically unbounded).
#plugin.executor.ataccama.one.job-processing.queue-capacity=2147483647

# Maximum number of threads in a pool dedicated to processing of events (defaults to 5).
#plugin.executor.ataccama.one.event-processing.max-pool-size=5
# Size of the thread pool dedicated to processing of events (defaults to 5).
#plugin.executor.ataccama.one.event-processing.core-pool-size=5
# Capacity of the executor queue dedicated to processing of events (defaults to practically unbounded).
#plugin.executor.ataccama.one.event-processing.queue-capacity=2147483647

# Maximum number of threads in a pool used for notifying about events in DPM.
#plugin.executor.ataccama.one.event-emitting.max-pool-size=5
# Size of the thread pool used for notifying about events in DPM.
#plugin.executor.ataccama.one.event-emitting.core-pool-size=5
# Capacity of the executor queue used for notifying about events in DPM (defaults to max integer).
#plugin.executor.ataccama.one.event-emitting.queue-capacity=2147483647

# The validity of jobs. Jobs which are older will be removed.
#plugin.executor.ataccama.one.job-expiration-interval=7d
# In milliseconds. 3600000 milliseconds is 1 hour.
#plugin.executor.ataccama.one.job-check-interval=3600000

# How long is shed lock valid
#plugin.executor.ataccama.one.lock-at-most-interval=5s
# In milliseconds - interval at which to read jobs from DB
#plugin.executor.ataccama.one.update-remote-jobs-interval=10000
# In milliseconds - how long should be remote job suspended after its detection so that originating DPM can handle it
#plugin.executor.ataccama.one.deferred-job-delay=5000
# How long could be the job inactive to be considered lost [Duration] (default 5s)
#plugin.executor.ataccama.one.job-lost-timeout=5s

# How long jobs could stay in event subscriber job cache [minutes] (default 5 minutes)
#plugin.executor.ataccama.one.subscription-job-cache-expiration=5
# How many jobs to keep in the event subscriber job cache (default 1000)
#plugin.executor.ataccama.one.subscription-job-cache-size=1000

# How long are job input files valid without being assigned to the job.
#plugin.executor.ataccama.one.job-input-storage-timeout=1h
# In milliseconds - How often to check validity of existing job input storages.
#plugin.executor.ataccama.one.job-input-storage-check-interval=1800000

# Maximum size of the thread pool used to execute asynchronous methods in the profiling plugin.
#plugin.profiling.ataccama.one.async.pool.size.max=5
# Size of the core thread pool used to execute asynchronous methods in the profiling plugin.
#plugin.profiling.ataccama.one.async.pool.size.core=2
# Size of the executor queue used to execute asynchronous methods in the profiling plugin.
#plugin.profiling.ataccama.one.async.queue.size=200

# How often to check jobs (e.g. for queue starvation or job health) [ms]
#plugin.executor.ataccama.one.job-watchdog-check-interval=5000
# Timeout for submitting a job (i.e. how long it could stay waiting in the job queue) [Duration].
# Special value: 0 = do not submit and fail immediately, undefined = no timeout (i.e. job can be queued forever).
#plugin.executor.ataccama.one.submit-timeout=30m
# How long is job considered recoverable after DPE disconnection. The job status is set to FAILURE when the timeout is exceeded. [Duration]
#plugin.executor.ataccama.one.job-disconnected-timeout=1h
# The maximum time the job can stay in of these statuses: UNKNOWN, SUBMITTED, PREPROCESSING, POSTPROCESSING. The job status is set to FAILURE when the timeout is exceeded. [Duration]
#plugin.executor.ataccama.one.job-at-dpm-timeout=1h

# Persistence setup
#spring.datasource.url=jdbc:postgresql://localhost:5431/dpm
#spring.datasource.username=one
#spring.datasource.password=one

# Enable storage of profiling results to shared file system
#plugin.profiling.ataccama.one.persist-profiles=false

# Shared object storage
ataccama.one.object-storage.required-writable-buckets=executor,drillthrough,profiling,lookups
ataccama.one.object-storage.try-create=true
ataccama.one.object-storage.fail-fast=true

#ataccama.one.object-storage.storages[0].isDefault=true
#ataccama.one.object-storage.storages[0].storageId=local
#ataccama.one.object-storage.storages[0].env=dev
#ataccama.one.object-storage.storages[0].storageType=MINIO
#ataccama.one.object-storage.storages[0].connectionProperties.url=http://localhost:8091
#ataccama.one.object-storage.storages[0].connectionProperties.access-key=minio
#ataccama.one.object-storage.storages[0].connectionProperties.secret-key=minio-secret
#ataccama.one.object-storage.storages[0].connectionProperties.tmp-expiration=3600000
##ataccama.one.object-storage.storages[0].connectionProperties.presigned-expiration-seconds=100000
##ataccama.one.object-storage.storages[0].connectionProperties.scheduled-executor-pool-size=1

# Client for Shared File System, e.g. MinIO
#ataccama.client.connection.storage.http.enabled=true
#ataccama.client.connection.storage.http.tls.enabled=true
#ataccama.client.connection.storage.http.tls.trustStore=<path to keystore>
#ataccama.client.connection.storage.http.tls.trustStorePassword=<password for keystore>

# MMM
#plugin.dqc.ataccama.one.mmm.hostname=localhost
#plugin.dqc.ataccama.one.mmm.port=8521

# HTTP server port
# The server provides GraphQL API and monitoring endpoints. It also serves DPM Admin Console front-end.
server.port=8031

# GraphQL
#graphql.servlet.mapping=/graphql

# Allowed roles
#ataccama.one.webserver.gql.allowed-roles=admin,DPP_admin

# Single sign-on URLs and client ID
#ataccama.one.webserver.sso.realm=${ataccama.authentication.keycloak.realm}
#ataccama.one.webserver.sso.base-url=${ataccama.authentication.keycloak.server-url}
#ataccama.one.webserver.sso.auth-url=${ataccama.one.webserver.sso.base-url}/realms/${ataccama.one.webserver.sso.realm}/protocol/openid-connect/auth
#ataccama.one.webserver.sso.token-url=${ataccama.one.webserver.sso.base-url}/realms/${ataccama.one.webserver.sso.realm}/protocol/openid-connect/token
#ataccama.one.webserver.sso.logout-url=${ataccama.one.webserver.sso.base-url}/realms/${ataccama.one.webserver.sso.realm}/protocol/openid-connect/logout
#ataccama.one.webserver.sso.client-id=dpm-webapp-public-client

# DPM console GraphQL API endpoint (to attach front-end to)
#ataccama.one.dpm-console.server.api-url=/graphql
# Base URL for the FE
ataccama.one.dpm-console.server.base-url=/

# Limits the maximum amount of recent jobs listed in the admin console.
#plugin.executor.ataccama.one.graphql.job.listing.limit=200

# Comma-separated list of launch model files which are to be removed from listing in the admin console (atop of the already streamed ones, such as logs).
# Lists "job.properties" by default (as they are already part of the submit details and when unmasked, they may leak sensitive information).
#plugin.dqc-support.ataccama.one.launch-model.file-names.inaccessible=job.properties

# Masking of sensitive key-value pairs in .properties files published over GraphQL API.
# Comma-separated list of masked keys in the properties. It can contain duplicates.
ataccama.one.graphql.masking.keys=
# Sets masking strategy (either `replacement`, or `omitting` the entry altogether). Replacement is the default strategy.
ataccama.one.graphql.masking.strategy=replacement
# Masking string used by the `replacement` strategy.
ataccama.one.graphql.masking.mask=\u2022\u2022\u2022\u2022\u2022

# Internal keystore configuration for encryption and decryption
#internal.encryption.keystore=<path/to/internal/keystore>
#internal.encryption.keystore.passwordFile=<path/to/internal/keystore/password-file>
#internal.encryption.keyAlias=<key-alias>
#internal.encryption.cipherName=<cipher-name>

# Properties keystore configuration for encryption and decryption
#properties.encryption.keystore=<path/to/properties/keystore>
#properties.encryption.keystore.passwordFile=<path/to/properties/keystore/password-file>
#properties.encryption.keyAlias=<key-alias>

# Audit
#ataccama.audit.enabled=true
#ataccama.audit.spring.datasource.jdbcUrl=jdbc:postgresql://localhost:5431/audit
#ataccama.audit.spring.datasource.username=one
#ataccama.audit.spring.datasource.password=one
#plugin.audit.spring.flyway.enabled=true

# graceful shutdown
#server.shutdown=graceful
#spring.lifecycle.timeout-per-shutdown-phase=30s
